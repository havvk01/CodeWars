/// MARK: - LeetCode 13. Roman to Integer
var s = "DCXXIII"
var num = 1
var num0 = 0
var sum = 0

for char in s.reversed() {
    switch char {
        case "I": num = 1
        case "V": num = 5
        case "X": num = 10
        case "L": num = 50
        case "C": num = 100
        case "D": num = 500
        case "M": num = 1000
    default:
        break
    }
    if num < num0 { sum -= num }
    else { sum += num }
    num0 = num
}
print(sum)


/// MARK: - LeetCode 7. Reverse Integer
class Solution {
    func reverse(_ x: Int) -> Int {
    var newX = x
    var new = 0

    while newX != 0 {
        new = (new * 10) + (newX % 10)
        newX /= 10
    }
    return new < Int32.min || new > Int32.max ? 0 : new
    }
}


/// MARK: - LeetCode 1. Two Sum
var array = [0,0]
var nums = [4,3,1,1,5]
var target = 9

for i in 0...nums.count-2 {
    for j in i+1...nums.count - 1 {
            if nums[i] + nums[j] == target {
                array[0] = i
                array[1] = j
            }
        }
}
print(array)

/// MARK: - LeetCode 9. Palindrome Number
class Solution {
    func isPalindrome(_ x: Int) -> Bool {
        String(x) == String(String(x).reversed()) ? true : false
    }
}
