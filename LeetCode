/// MARK: - LeetCode 13. Roman to Integer
var s = "DCXXIII"
var num = 1
var num0 = 0
var sum = 0

for char in s.reversed() {
    switch char {
        case "I": num = 1
        case "V": num = 5
        case "X": num = 10
        case "L": num = 50
        case "C": num = 100
        case "D": num = 500
        case "M": num = 1000
    default:
        break
    }
    if num < num0 { sum -= num }
    else { sum += num }
    num0 = num
}
print(sum)


/// MARK: - LeetCode 7. Reverse Integer
class Solution {
    func reverse(_ x: Int) -> Int {
    var newX = x
    var new = 0

    while newX != 0 {
        new = (new * 10) + (newX % 10)
        newX /= 10
    }
    return new < Int32.min || new > Int32.max ? 0 : new
    }
}


/// MARK: - LeetCode 1. Two Sum
var array = [0,0]
var nums = [4,3,1,1,5]
var target = 9

for i in 0...nums.count-2 {
    for j in i+1...nums.count - 1 {
            if nums[i] + nums[j] == target {
                array[0] = i
                array[1] = j
            }
        }
}
print(array)

/// MARK: - LeetCode 9. Palindrome Number
class Solution {
    func isPalindrome(_ x: Int) -> Bool {
        String(x) == String(String(x).reversed())
    }
}

/// MARK: - LeetCode 14. Longest Common Prefix
class Solution {
    func longestCommonPrefix(_ strs: [String]) -> String {
        if strs.isEmpty {
            return ""
        }
        var pref = strs[0]
        for str in strs {
            while !str.hasPrefix(pref) {
                pref = String(pref.dropLast())
            }
        }
        return pref
    }
}

/// MARK: - LeetCode 20. Valid Parentheses
class Solution {
    func isValid(_ s: String) -> Bool {
        if s.isEmpty || s.count % 2 != 0 { return false }
        var sStack = [Character]()
        for str in s {
            switch str {
                case "(":
                    sStack.append(")")
                case "[":
                    sStack.append("]")
                case "{":
                    sStack.append("}")
                default: 
                    if sStack.isEmpty || sStack.removeLast() != str {
                        return false
                        break
                    }
            }
        }
        return sStack.isEmpty ? true : false
    }
}

/// MARK: - LeetCode 66. Plus One
class Solution {
    func plusOne(_ digits: [Int]) -> [Int] {
        var digits = digits
    if digits.min() == 9 {
        var newdigits = [1]
        newdigits.append(contentsOf: repeatElement(0, count: digits.count))
        return (newdigits)
    }
    else {
        var counter = 1
        while digits[digits.count - counter] == 9 {
            digits[digits.count - counter] = 0
            counter += 1
        }
        digits[digits.count - counter] += 1
    }
    return (digits)
    }
}

/// MARK: - LeetCode 35. Search Insert Position
class Solution {
    func searchInsert(_ nums: [Int], _ target: Int) -> Int {
    nums.firstIndex(where: { $0 >= target}) ?? nums.count
    //        for index in 0...nums.count-1 {
    //            if nums[index] >= target { return index }  
    //        }
    //    return nums.count
    }
}

